* MOVE THESE TO github

* in R Griffiths doc. pg 4, line should read 'product of sums' not
  'sum of products'.

* func to create density matrix from pos semi def matrix. (ie normalize)

* add examples of quantum circuits with gates to doc.

* collect discussion of implementation of objects and matrix operators
  in one place in docs.

* add error detection

* document separable. is this the best way to implement this, or should
  they be separate functions ?

* unitaryp is problematic to implement. How should floating point
  or trigsimp be done ?

* document list_eivals, ketp, brap, square_matp, schmidt_coefficients,
  normalize_vector

* add links to inside manual for examples from distribution web page index

* add test for unitarity , hermiticiy, etc. (if they are not already in maxima)

* build sectioned version of manual. version linked to local copy of maxima
  manual. combinations of these.

* optimize lisp. eg, use fixnum when appropriate (maybe
  works in Maxima too) keep this in mind, but for now follow
  Knuth, et. al. optimize later when slow parts are
  identified.

* improve lisp integer numeration code


* put proj(ketz(0,0)) = proj(braz(0,0))  in example

* other diagnostics on werner state. such as purity

* use renyi, etc in examples

* enlarge the schmidt ket example to use as many functions as
  possible , show there is more than one way to generate it,
  etc.

* show that GHZ and bell states are generated by rotating product states

* examine float vs rational problems with the different entropies. They
  can probably be handled uniformly. It is probably the log2 function that
  is forcing things to be rational in von Neumann entropy.

* rotate computational bases to put bipartite system in schmidt form

* compute operator invariants ?

CHSH operator
Gates, Deutsch gate
trace (hilber schmidt) product tr(A^\dagger B)
hadamard product (element-wise matrix product)
majorization relations
postive partial transpose
partial transpose
biconcurrence
relative entropy of entanglement
fidelity or singlet fraction
conditional entropy
trace distance
bures distance
hilbert schmidt distance
linear entropy
participation ratio
mutual information
negativity
logarithmic negativity
amplitude damping
kraus operators
augusiak criterion

prettyprint kets

check matrix rank and schmidt rank

------------------------------------------

Partially Done
------------------------------------------
* remove unused code from qinf.mac, put it in optional mac file

* entropy and other functions that compute eigenvalues
  do not handle floating point numbers. They convert them
  to rationals. this is wrong behavior. Note, it might
  be log2. the renyi works ok.
------------------------------------------


Done
------------------------------------------
* provide ZIP archive format
* Just linked quantiki list. list other computer algebra quantum inf sites.
* check for separability of pure bipartite state of system AB,
  by doing purity( ptrace(rho,1)) , ie Tr((rho_A)^2)
* change instances of 'commmand' to 'function'.
  "the cos command" --> "the cos function"
* check statement about  'is' checking for lexical, equality. this
  is not true
* change all index links inside section headings to just after
 section headings. otherwise, the section number is not put in the
  index
* find good bibliography style, with links to eprints
* wootters concurrence
* change toproj to 'proj'
* bell operators
* hadamard operator
* werner states
* GHZ state
* alpha-Renyi entropy
* Change z-axis to 'computational basis'
* In documentation the big measurement line in the
 entanglement swapping does not appear in latex  form,
  only qinf form !
------------------------------------------


* following is the line used to write lisp translations of the functions to a file. they
  are used as a starting point to rewrite the functions in lisp

compfile("tf", entropy, renyi_entropy, ptrace, ptracen, ptrace_one_dimension, tensor_product, "otimes", _ket, ketz,ketx,kety, braz,bray, ket_n,bra_n, listket, matkets, toproj, tovect, pauli_product, invpauliexp, _one_pauli_coeff,  correlation_tensor, entropy, entropyf, renyi_entropy, renyi_entropyf, tsallis_entropy, tsallis_entropyf, fidelity, spinor_rotation_op, spinor_rotation_op_trig);
