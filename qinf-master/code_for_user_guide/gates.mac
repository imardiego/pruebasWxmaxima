
Ughz : cnot(3,2,1) . cnot(3,3,1) . insert_operator(3,[hadamard,1]);
/* test that our definitions of Ughz agree with generating them with the operator above.
map( lambda( [x], is ( Ughz . apply(ketz,x) = arrayapply(ghz,x))), create_list([i,j,k],i,0,1,j,0,1,k,0,1));

/* check that the each possible one bit reduced state is ident(2)/2, which has entropy 1.
  This should return false */
member(false,mapapply(lambda([i,j,k,l], is(ptrace(proj(ghz[i,j,k]),l[1],l[2])=ident(2)/2)),create_list([i,j,k,l],i,0,1,j,0,1,k,0,1,l,[[1,2],[1,3],[2,3]])));

/* check that each possible two-qubit reduced state has entropy 1
  This should return false */
member(false,mapapply(lambda([i,j,k,l], is(entropy(ptrace(proj(ghz[i,j,k]),l))=1)),create_list([i,j,k,l],i,0,1,j,0,1,k,0,1,l,1,3)));

/* same test for bell states */
Ubell : cnot(2,1,2) . hadamard(2,1);
map( lambda( [x], is ( Ubell . apply(ketz,x) = arrayapply(bell,x))), create_list([i,j],i,0,1,j,0,1));

/* plot entropy of werner state as a function of the parameter */
plot2d(entropy(werner(a,1,0)), [a,0,1]);
